{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "VoterRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Voting.WorkflowStatus",
          "name": "previousStatus",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum Voting.WorkflowStatus",
          "name": "newStatus",
          "type": "uint8"
        }
      ],
      "name": "WorkflowStatusChange",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_desc",
          "type": "string"
        }
      ],
      "name": "addProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endProposalsRegistering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endVotingSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getOneProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "voteCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "getVoter",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "votedProposalId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.Voter",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "setVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startProposalsRegistering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startVotingSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tallyVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningProposalID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workflowStatus",
      "outputs": [
        {
          "internalType": "enum Voting.WorkflowStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd0243a1f77aa1133f1ec227234dcea74de9c3cf0b0faf3ee8acfa4083f0d170c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2076754",
    "logsBloom": "0x
    "blockHash": "0xdd15b38a9443927f3e4f982e9d02df04417181bcf918abecf6c6732826cb2778",
    "transactionHash": "0xd0243a1f77aa1133f1ec227234dcea74de9c3cf0b0faf3ee8acfa4083f0d170c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xd0243a1f77aa1133f1ec227234dcea74de9c3cf0b0faf3ee8acfa4083f0d170c",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdd15b38a9443927f3e4f982e9d02df04417181bcf918abecf6c6732826cb2778"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2076754",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3331ac424b4e7d737ecb744e3077f61e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"VoterRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"previousStatus\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"WorkflowStatusChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_desc\",\"type\":\"string\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endProposalsRegistering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endVotingSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getOneProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"voteCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getVoter\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votedProposalId\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.Voter\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startProposalsRegistering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVotingSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningProposalID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workflowStatus\",\"outputs\":[{\"internalType\":\"enum Voting.WorkflowStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addProposal(string)\":{\"details\":\"callable by Voters only\",\"params\":{\"_desc\":\"The decription string of the proposal\"}},\"addVoter(address)\":{\"details\":\"callable by Owner only\",\"params\":{\"_addr\":\"The address of the voter to add\"}},\"endProposalsRegistering()\":{\"details\":\"callable by Owner only\"},\"endVotingSession()\":{\"details\":\"callable by Owner only\"},\"getOneProposal(uint256)\":{\"details\":\"Returns Proposal Array with description and vote count\",\"params\":{\"_id\":\"The index value of the proposal\"}},\"getVoter(address)\":{\"details\":\"only callable by VotersReturns 3 elements : isRegistred, hasVoted, votedProposedID\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setVote(uint256)\":{\"details\":\"callable by Voters only\",\"params\":{\"_id\":\"The index value of the proposal\"}},\"startProposalsRegistering()\":{\"details\":\"callable by Owner only\"},\"startVotingSession()\":{\"details\":\"callable by Owner only\"},\"tallyVotes()\":{\"details\":\"callable by Owner only\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addProposal(string)\":{\"notice\":\"Add new proposal\"},\"addVoter(address)\":{\"notice\":\"Registre new voter\"},\"endProposalsRegistering()\":{\"notice\":\"State change from 1 to 2\"},\"endVotingSession()\":{\"notice\":\"State change from 3 to 4\"},\"getOneProposal(uint256)\":{\"notice\":\"Returns the proposal\"},\"getVoter(address)\":{\"notice\":\"Returns voters\"},\"setVote(uint256)\":{\"notice\":\"Add vote to a proposal\"},\"startProposalsRegistering()\":{\"notice\":\"State change from 0 to 1\"},\"startVotingSession()\":{\"notice\":\"State change from 2 to 3\"},\"tallyVotes()\":{\"notice\":\"Tally vote\"},\"winningProposalID()\":{\"notice\":\"Manage voting processus\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voting.sol\":\"Voting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/// @title Voting system smart contract\\n/// @author RhalidBks\\n/// @notice You can use this contract to manage a decentralized autonomous organisation with proposas and voting process\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Voting is Ownable {\\n    /// @notice Manage voting processus\\n    uint256 public winningProposalID;\\n\\n    struct Voter {\\n        bool isRegistered;\\n        bool hasVoted;\\n        uint256 votedProposalId;\\n    }\\n\\n    struct Proposal {\\n        string description;\\n        uint256 voteCount;\\n    }\\n\\n    enum WorkflowStatus {\\n        RegisteringVoters,\\n        ProposalsRegistrationStarted,\\n        ProposalsRegistrationEnded,\\n        VotingSessionStarted,\\n        VotingSessionEnded,\\n        VotesTallied\\n    }\\n\\n    WorkflowStatus public workflowStatus;\\n    Proposal[] proposalsArray;\\n    mapping(address => Voter) voters;\\n\\n    event VoterRegistered(address voterAddress);\\n    event WorkflowStatusChange(\\n        WorkflowStatus previousStatus,\\n        WorkflowStatus newStatus\\n    );\\n    event ProposalRegistered(uint256 proposalId);\\n    event Voted(address voter, uint256 proposalId);\\n\\n    modifier onlyVoters() {\\n        require(voters[msg.sender].isRegistered, \\\"You're not a voter\\\");\\n        _;\\n    }\\n\\n    // on peut faire un modifier pour les \\u00e9tats\\n\\n    // ::::::::::::: GETTERS ::::::::::::: //\\n\\n    /// @notice Returns voters\\n    /// @dev only callable by Voters\\n    /// @dev Returns 3 elements : isRegistred, hasVoted, votedProposedID\\n    function getVoter(address _addr)\\n        external\\n        view\\n        onlyVoters\\n        returns (Voter memory)\\n    {\\n        return voters[_addr];\\n    }\\n\\n    /// @notice Returns the proposal\\n    /// @param _id The index value of the proposal\\n    /// @dev Returns Proposal Array with description and vote count\\n    function getOneProposal(uint256 _id)\\n        external\\n        view\\n        onlyVoters\\n        returns (Proposal memory)\\n    {\\n        return proposalsArray[_id];\\n    }\\n\\n    // ::::::::::::: REGISTRATION ::::::::::::: //\\n\\n    /// @notice Registre new voter\\n    /// @param _addr The address of the voter to add\\n    /// @dev callable by Owner only\\n    function addVoter(address _addr) external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.RegisteringVoters,\\n            \\\"Voters registration is not open yet\\\"\\n        );\\n        require(voters[_addr].isRegistered != true, \\\"Already registered\\\");\\n\\n        voters[_addr].isRegistered = true;\\n        emit VoterRegistered(_addr);\\n    }\\n\\n    // ::::::::::::: PROPOSAL ::::::::::::: //\\n\\n    /// @notice Add new proposal\\n    /// @param _desc The decription string of the proposal\\n    /// @dev callable by Voters only\\n    function addProposal(string calldata _desc) external onlyVoters {\\n        require(\\n            workflowStatus == WorkflowStatus.ProposalsRegistrationStarted,\\n            \\\"Proposals are not allowed yet\\\"\\n        );\\n        require(\\n            keccak256(abi.encode(_desc)) != keccak256(abi.encode(\\\"\\\")),\\n            \\\"Vous ne pouvez pas ne rien proposer\\\"\\n        ); // facultatif\\n        // voir que desc est different des autres\\n\\n        Proposal memory proposal;\\n        proposal.description = _desc;\\n        proposalsArray.push(proposal);\\n        emit ProposalRegistered(proposalsArray.length - 1);\\n    }\\n\\n    // ::::::::::::: VOTE ::::::::::::: //\\n\\n    /// @notice Add vote to a proposal\\n    /// @param _id The index value of the proposal\\n    /// @dev callable by Voters only\\n    function setVote(uint256 _id) external onlyVoters {\\n        require(\\n            workflowStatus == WorkflowStatus.VotingSessionStarted,\\n            \\\"Voting session havent started yet\\\"\\n        );\\n        require(voters[msg.sender].hasVoted != true, \\\"You have already voted\\\");\\n        require(_id < proposalsArray.length, \\\"Proposal not found\\\"); // pas oblig\\u00e9, et pas besoin du >0 car uint\\n\\n        voters[msg.sender].votedProposalId = _id;\\n        voters[msg.sender].hasVoted = true;\\n        proposalsArray[_id].voteCount++;\\n\\n        emit Voted(msg.sender, _id);\\n    }\\n\\n    // ::::::::::::: STATE ::::::::::::: //\\n\\n    /// @notice State change from 0 to 1\\n    /// @dev callable by Owner only\\n    function startProposalsRegistering() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.RegisteringVoters,\\n            \\\"Registering proposals cant be started now\\\"\\n        );\\n        workflowStatus = WorkflowStatus.ProposalsRegistrationStarted;\\n\\n        Proposal memory proposal;\\n        proposal.description = \\\"GENESIS\\\";\\n        proposalsArray.push(proposal);\\n\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.RegisteringVoters,\\n            WorkflowStatus.ProposalsRegistrationStarted\\n        );\\n    }\\n\\n    /// @notice State change from 1 to 2\\n    /// @dev callable by Owner only\\n    function endProposalsRegistering() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.ProposalsRegistrationStarted,\\n            \\\"Registering proposals havent started yet\\\"\\n        );\\n        workflowStatus = WorkflowStatus.ProposalsRegistrationEnded;\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.ProposalsRegistrationStarted,\\n            WorkflowStatus.ProposalsRegistrationEnded\\n        );\\n    }\\n\\n    /// @notice State change from 2 to 3\\n    /// @dev callable by Owner only\\n    function startVotingSession() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.ProposalsRegistrationEnded,\\n            \\\"Registering proposals phase is not finished\\\"\\n        );\\n        workflowStatus = WorkflowStatus.VotingSessionStarted;\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.ProposalsRegistrationEnded,\\n            WorkflowStatus.VotingSessionStarted\\n        );\\n    }\\n\\n    /// @notice State change from 3 to 4\\n    /// @dev callable by Owner only\\n    function endVotingSession() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.VotingSessionStarted,\\n            \\\"Voting session havent started yet\\\"\\n        );\\n        workflowStatus = WorkflowStatus.VotingSessionEnded;\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.VotingSessionStarted,\\n            WorkflowStatus.VotingSessionEnded\\n        );\\n    }\\n\\n    /// @notice Tally vote\\n    /// @dev callable by Owner only\\n    function tallyVotes() external onlyOwner {\\n        require(\\n            workflowStatus == WorkflowStatus.VotingSessionEnded,\\n            \\\"Current status is not voting session ended\\\"\\n        );\\n        uint256 _winningProposalId;\\n        for (uint256 p = 0; p < 3000; p++) {\\n            if (\\n                proposalsArray[p].voteCount >\\n                proposalsArray[_winningProposalId].voteCount\\n            ) {\\n                _winningProposalId = p;\\n            }\\n        }\\n        winningProposalID = _winningProposalId;\\n\\n        workflowStatus = WorkflowStatus.VotesTallied;\\n        emit WorkflowStatusChange(\\n            WorkflowStatus.VotingSessionEnded,\\n            WorkflowStatus.VotesTallied\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xabbaec052036be65b6bfdcf52d2372621d6d46e822cd55042d8c527b5770c577\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a7bfab1611610097578063d4f50f9811610066578063d4f50f98146101ee578063ee74c6781461021e578063f2fde38b14610228578063f4ab9adf14610244576100f5565b8063a7bfab16146101b2578063bdc01431146101bc578063c7038a4e146101da578063c88af42f146101e4576100f5565b8063715018a6116100d3578063715018a61461013c5780638da5cb5b14610146578063a1edffa214610164578063a2788cce14610182576100f5565b8063230796ae146100fa5780632fdae3c514610116578063378a217814610132575b600080fd5b610114600480360381019061010f919061144e565b610260565b005b610130600480360381019061012b91906114e0565b61055b565b005b61013a6107de565b005b610144610948565b005b61014e61095c565b60405161015b919061156e565b60405180910390f35b61016c610985565b6040516101799190611600565b60405180910390f35b61019c6004803603810190610197919061144e565b610998565b6040516101a991906116f7565b60405180910390f35b6101ba610aff565b005b6101c4610be5565b6040516101d19190611728565b60405180910390f35b6101e2610beb565b005b6101ec610d66565b005b6102086004803603810190610203919061176f565b610e4b565b60405161021591906117f9565b60405180910390f35b610226610f73565b005b610242600480360381019061023d919061176f565b611059565b005b61025e6004803603810190610259919061176f565b6110dc565b005b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e690611871565b60405180910390fd5b6003600581111561030357610302611589565b5b600260009054906101000a900460ff16600581111561032557610324611589565b5b14610365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035c90611903565b60405180910390fd5b60011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff161515036103fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f29061196f565b60405180910390fd5b6003805490508110610442576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610439906119db565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff021916908315150217905550600381815481106104f8576104f76119fb565b5b9060005260206000209060020201600101600081548092919061051a90611a59565b91905055507f4d99b957a2bc29a30ebd96a7be8e68fe50a3c701db28a91436490b7d53870ca43382604051610550929190611aa1565b60405180910390a150565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166105ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e190611871565b60405180910390fd5b600160058111156105fe576105fd611589565b5b600260009054906101000a900460ff1660058111156106205761061f611589565b5b14610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790611b16565b60405180910390fd5b60405160200161066f90611b5c565b604051602081830303815290604052805190602001208282604051602001610698929190611bb8565b60405160208183030381529060405280519060200120036106ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e590611c4e565b60405180910390fd5b6106f66113cf565b82828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508160000181905250600381908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000190816107849190611ea9565b506020820151816001015550507f92e393e9b54e2f801d3ea4beb0c5e71a21cc34a5d34b77d0fb8a3aa1650dc18f60016003805490506107c49190611f7b565b6040516107d19190611728565b60405180910390a1505050565b6107e6611285565b600460058111156107fa576107f9611589565b5b600260009054906101000a900460ff16600581111561081c5761081b611589565b5b1461085c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085390612021565b60405180910390fd5b600080600090505b610bb88110156108d75760038281548110610882576108816119fb565b5b906000526020600020906002020160010154600382815481106108a8576108a76119fb565b5b90600052602060002090600202016001015411156108c4578091505b80806108cf90611a59565b915050610864565b50806001819055506005600260006101000a81548160ff0219169083600581111561090557610904611589565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f6004600560405161093d929190612041565b60405180910390a150565b610950611285565b61095a6000611303565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900460ff1681565b6109a06113cf565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2690611871565b60405180910390fd5b60038281548110610a4357610a426119fb565b5b9060005260206000209060020201604051806040016040529081600082018054610a6c90611ccc565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9890611ccc565b8015610ae55780601f10610aba57610100808354040283529160200191610ae5565b820191906000526020600020905b815481529060010190602001808311610ac857829003601f168201915b505050505081526020016001820154815250509050919050565b610b07611285565b60036005811115610b1b57610b1a611589565b5b600260009054906101000a900460ff166005811115610b3d57610b3c611589565b5b14610b7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7490611903565b60405180910390fd5b6004600260006101000a81548160ff02191690836005811115610ba357610ba2611589565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60036004604051610bdb929190612041565b60405180910390a1565b60015481565b610bf3611285565b60006005811115610c0757610c06611589565b5b600260009054906101000a900460ff166005811115610c2957610c28611589565b5b14610c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c60906120dc565b60405180910390fd5b6001600260006101000a81548160ff02191690836005811115610c8f57610c8e611589565b5b0217905550610c9c6113cf565b6040518060400160405280600781526020017f47454e4553495300000000000000000000000000000000000000000000000000815250816000018190525060038190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000019081610d1b9190611ea9565b506020820151816001015550507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60006001604051610d5b929190612041565b60405180910390a150565b610d6e611285565b60016005811115610d8257610d81611589565b5b600260009054906101000a900460ff166005811115610da457610da3611589565b5b14610de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddb9061216e565b60405180910390fd5b60028060006101000a81548160ff02191690836005811115610e0957610e08611589565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f60016002604051610e41929190612041565b60405180910390a1565b610e536113e9565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610ee2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed990611871565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820154815250509050919050565b610f7b611285565b60026005811115610f8f57610f8e611589565b5b600260009054906101000a900460ff166005811115610fb157610fb0611589565b5b14610ff1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe890612200565b60405180910390fd5b6003600260006101000a81548160ff0219169083600581111561101757611016611589565b5b02179055507f0a97a4ee45751e2abf3e4fc8946939630b11b371ea8ae39ccdc3056e98f5cc3f6002600360405161104f929190612041565b60405180910390a1565b611061611285565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c790612292565b60405180910390fd5b6110d981611303565b50565b6110e4611285565b600060058111156110f8576110f7611589565b5b600260009054906101000a900460ff16600581111561111a57611119611589565b5b1461115a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115190612324565b60405180910390fd5b60011515600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515036111f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e790612390565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff0219169083151502179055507fb6be2187d059cc2a55fe29e0e503b566e1e0f8c8780096e185429350acffd3dd8160405161127a919061156e565b60405180910390a150565b61128d6113c7565b73ffffffffffffffffffffffffffffffffffffffff166112ab61095c565b73ffffffffffffffffffffffffffffffffffffffff1614611301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f8906123fc565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b604051806040016040528060608152602001600081525090565b6040518060600160405280600015158152602001600015158152602001600081525090565b600080fd5b600080fd5b6000819050919050565b61142b81611418565b811461143657600080fd5b50565b60008135905061144881611422565b92915050565b6000602082840312156114645761146361140e565b5b600061147284828501611439565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126114a05761149f61147b565b5b8235905067ffffffffffffffff8111156114bd576114bc611480565b5b6020830191508360018202830111156114d9576114d8611485565b5b9250929050565b600080602083850312156114f7576114f661140e565b5b600083013567ffffffffffffffff81111561151557611514611413565b5b6115218582860161148a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115588261152d565b9050919050565b6115688161154d565b82525050565b6000602082019050611583600083018461155f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600681106115c9576115c8611589565b5b50565b60008190506115da826115b8565b919050565b60006115ea826115cc565b9050919050565b6115fa816115df565b82525050565b600060208201905061161560008301846115f1565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561165557808201518184015260208101905061163a565b60008484015250505050565b6000601f19601f8301169050919050565b600061167d8261161b565b6116878185611626565b9350611697818560208601611637565b6116a081611661565b840191505092915050565b6116b481611418565b82525050565b600060408301600083015184820360008601526116d78282611672565b91505060208301516116ec60208601826116ab565b508091505092915050565b6000602082019050818103600083015261171181846116ba565b905092915050565b61172281611418565b82525050565b600060208201905061173d6000830184611719565b92915050565b61174c8161154d565b811461175757600080fd5b50565b60008135905061176981611743565b92915050565b6000602082840312156117855761178461140e565b5b60006117938482850161175a565b91505092915050565b60008115159050919050565b6117b18161179c565b82525050565b6060820160008201516117cd60008501826117a8565b5060208201516117e060208501826117a8565b5060408201516117f360408501826116ab565b50505050565b600060608201905061180e60008301846117b7565b92915050565b600082825260208201905092915050565b7f596f75277265206e6f74206120766f7465720000000000000000000000000000600082015250565b600061185b601283611814565b915061186682611825565b602082019050919050565b6000602082019050818103600083015261188a8161184e565b9050919050565b7f566f74696e672073657373696f6e20686176656e74207374617274656420796560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b60006118ed602183611814565b91506118f882611891565b604082019050919050565b6000602082019050818103600083015261191c816118e0565b9050919050565b7f596f75206861766520616c726561647920766f74656400000000000000000000600082015250565b6000611959601683611814565b915061196482611923565b602082019050919050565b600060208201905081810360008301526119888161194c565b9050919050565b7f50726f706f73616c206e6f7420666f756e640000000000000000000000000000600082015250565b60006119c5601283611814565b91506119d08261198f565b602082019050919050565b600060208201905081810360008301526119f4816119b8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a6482611418565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a9657611a95611a2a565b5b600182019050919050565b6000604082019050611ab6600083018561155f565b611ac36020830184611719565b9392505050565b7f50726f706f73616c7320617265206e6f7420616c6c6f77656420796574000000600082015250565b6000611b00601d83611814565b9150611b0b82611aca565b602082019050919050565b60006020820190508181036000830152611b2f81611af3565b9050919050565b50565b6000611b46600083611814565b9150611b5182611b36565b600082019050919050565b60006020820190508181036000830152611b7581611b39565b9050919050565b82818337600083830152505050565b6000611b978385611814565b9350611ba4838584611b7c565b611bad83611661565b840190509392505050565b60006020820190508181036000830152611bd3818486611b8b565b90509392505050565b7f566f7573206e6520706f7576657a20706173206e65207269656e2070726f706f60008201527f7365720000000000000000000000000000000000000000000000000000000000602082015250565b6000611c38602383611814565b9150611c4382611bdc565b604082019050919050565b60006020820190508181036000830152611c6781611c2b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ce457607f821691505b602082108103611cf757611cf6611c9d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611d5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611d22565b611d698683611d22565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611da6611da1611d9c84611418565b611d81565b611418565b9050919050565b6000819050919050565b611dc083611d8b565b611dd4611dcc82611dad565b848454611d2f565b825550505050565b600090565b611de9611ddc565b611df4818484611db7565b505050565b5b81811015611e1857611e0d600082611de1565b600181019050611dfa565b5050565b601f821115611e5d57611e2e81611cfd565b611e3784611d12565b81016020851015611e46578190505b611e5a611e5285611d12565b830182611df9565b50505b505050565b600082821c905092915050565b6000611e8060001984600802611e62565b1980831691505092915050565b6000611e998383611e6f565b9150826002028217905092915050565b611eb28261161b565b67ffffffffffffffff811115611ecb57611eca611c6e565b5b611ed58254611ccc565b611ee0828285611e1c565b600060209050601f831160018114611f135760008415611f01578287015190505b611f0b8582611e8d565b865550611f73565b601f198416611f2186611cfd565b60005b82811015611f4957848901518255600182019150602085019450602081019050611f24565b86831015611f665784890151611f62601f891682611e6f565b8355505b6001600288020188555050505b505050505050565b6000611f8682611418565b9150611f9183611418565b9250828203905081811115611fa957611fa8611a2a565b5b92915050565b7f43757272656e7420737461747573206973206e6f7420766f74696e672073657360008201527f73696f6e20656e64656400000000000000000000000000000000000000000000602082015250565b600061200b602a83611814565b915061201682611faf565b604082019050919050565b6000602082019050818103600083015261203a81611ffe565b9050919050565b600060408201905061205660008301856115f1565b61206360208301846115f1565b9392505050565b7f5265676973746572696e672070726f706f73616c732063616e7420626520737460008201527f6172746564206e6f770000000000000000000000000000000000000000000000602082015250565b60006120c6602983611814565b91506120d18261206a565b604082019050919050565b600060208201905081810360008301526120f5816120b9565b9050919050565b7f5265676973746572696e672070726f706f73616c7320686176656e742073746160008201527f7274656420796574000000000000000000000000000000000000000000000000602082015250565b6000612158602883611814565b9150612163826120fc565b604082019050919050565b600060208201905081810360008301526121878161214b565b9050919050565b7f5265676973746572696e672070726f706f73616c73207068617365206973206e60008201527f6f742066696e6973686564000000000000000000000000000000000000000000602082015250565b60006121ea602b83611814565b91506121f58261218e565b604082019050919050565b60006020820190508181036000830152612219816121dd565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061227c602683611814565b915061228782612220565b604082019050919050565b600060208201905081810360008301526122ab8161226f565b9050919050565b7f566f7465727320726567697374726174696f6e206973206e6f74206f70656e2060008201527f7965740000000000000000000000000000000000000000000000000000000000602082015250565b600061230e602383611814565b9150612319826122b2565b604082019050919050565b6000602082019050818103600083015261233d81612301565b9050919050565b7f416c726561647920726567697374657265640000000000000000000000000000600082015250565b600061237a601283611814565b915061238582612344565b602082019050919050565b600060208201905081810360008301526123a98161236d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006123e6602083611814565b91506123f1826123b0565b602082019050919050565b60006020820190508181036000830152612415816123d9565b905091905056fea264697066735822122078f17ba8abc80beb4164dfd29aa41cc1a675eb448a75250562243bef23509e4164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addProposal(string)": {
        "details": "callable by Voters only",
        "params": {
          "_desc": "The decription string of the proposal"
        }
      },
      "addVoter(address)": {
        "details": "callable by Owner only",
        "params": {
          "_addr": "The address of the voter to add"
        }
      },
      "endProposalsRegistering()": {
        "details": "callable by Owner only"
      },
      "endVotingSession()": {
        "details": "callable by Owner only"
      },
      "getOneProposal(uint256)": {
        "details": "Returns Proposal Array with description and vote count",
        "params": {
          "_id": "The index value of the proposal"
        }
      },
      "getVoter(address)": {
        "details": "only callable by VotersReturns 3 elements : isRegistred, hasVoted, votedProposedID"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setVote(uint256)": {
        "details": "callable by Voters only",
        "params": {
          "_id": "The index value of the proposal"
        }
      },
      "startProposalsRegistering()": {
        "details": "callable by Owner only"
      },
      "startVotingSession()": {
        "details": "callable by Owner only"
      },
      "tallyVotes()": {
        "details": "callable by Owner only"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addProposal(string)": {
        "notice": "Add new proposal"
      },
      "addVoter(address)": {
        "notice": "Registre new voter"
      },
      "endProposalsRegistering()": {
        "notice": "State change from 1 to 2"
      },
      "endVotingSession()": {
        "notice": "State change from 3 to 4"
      },
      "getOneProposal(uint256)": {
        "notice": "Returns the proposal"
      },
      "getVoter(address)": {
        "notice": "Returns voters"
      },
      "setVote(uint256)": {
        "notice": "Add vote to a proposal"
      },
      "startProposalsRegistering()": {
        "notice": "State change from 0 to 1"
      },
      "startVotingSession()": {
        "notice": "State change from 2 to 3"
      },
      "tallyVotes()": {
        "notice": "Tally vote"
      },
      "winningProposalID()": {
        "notice": "Manage voting processus"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Voting.sol:Voting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 142,
        "contract": "contracts/Voting.sol:Voting",
        "label": "winningProposalID",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 164,
        "contract": "contracts/Voting.sol:Voting",
        "label": "workflowStatus",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(WorkflowStatus)161"
      },
      {
        "astId": 168,
        "contract": "contracts/Voting.sol:Voting",
        "label": "proposalsArray",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Proposal)154_storage)dyn_storage"
      },
      {
        "astId": 173,
        "contract": "contracts/Voting.sol:Voting",
        "label": "voters",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Voter)149_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)154_storage)dyn_storage": {
        "base": "t_struct(Proposal)154_storage",
        "encoding": "dynamic_array",
        "label": "struct Voting.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(WorkflowStatus)161": {
        "encoding": "inplace",
        "label": "enum Voting.WorkflowStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Voter)149_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Voting.Voter)",
        "numberOfBytes": "32",
        "value": "t_struct(Voter)149_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)154_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Proposal",
        "members": [
          {
            "astId": 151,
            "contract": "contracts/Voting.sol:Voting",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 153,
            "contract": "contracts/Voting.sol:Voting",
            "label": "voteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Voter)149_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Voter",
        "members": [
          {
            "astId": 144,
            "contract": "contracts/Voting.sol:Voting",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 146,
            "contract": "contracts/Voting.sol:Voting",
            "label": "hasVoted",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 148,
            "contract": "contracts/Voting.sol:Voting",
            "label": "votedProposalId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}